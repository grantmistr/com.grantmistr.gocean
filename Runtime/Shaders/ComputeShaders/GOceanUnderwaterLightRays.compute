#pragma kernel LightRays

#pragma multi_compile _ UNITY_UV_STARTS_AT_TOP

#include "../ShaderInclude/GOcean_Constants.hlsl"
#include "../ShaderInclude/GOcean_HDRP_ShaderVariablesGlobal.hlsl"
#include "../ShaderInclude/GOcean_HelperFunctions.hlsl"
#include "../ShaderInclude/GOcean_TextureSamplers.hlsl"
#include "../ShaderInclude/GOcean_TerrainHeightmapSampling.hlsl"
#include "../ShaderInclude/GOcean_TerrainHeightmapProperties.hlsl"
#include "../ShaderInclude/GOcean_UnderwaterSampling.hlsl"
#include "../ShaderInclude/GOcean_HDRP_ShadowDefines.hlsl"
#include "../ShaderInclude/GOcean_ShadowSampling.hlsl"
#include "../ShaderInclude/GOcean_DirectionalLightData.hlsl"

#define THREADS_X 8
#define THREADS_Y 8
#define THREADS_Z 1

struct CoordinateData
{
    float2 positionNDC;
    float4 positionCS;
    float4 positionRWS;
    float3 positionWS;
    float3 positionWSRot;
    
    float viewDepth;
    float rawDepth;
};

RWTexture2D<uint> _OceanScreenTexture;
RWTexture2D<float2> _TemporaryBlurTexture;

Texture2DArray<float4> _SpectrumTexture;
Texture2DArray<float> _CameraDepthTexture;
Texture2D<float> _WaterDepthTexture;
Texture2D _ScreenWaterNoiseTexture;
float4 _ScreenWaterNoiseTexture_TexelSize;

float4  _PatchHighestWaveCount, _PatchLowestWaveCount;
float   _MaxSliceDepth, _MinSliceDepth, _LightRayFadeInDistance, _LightRayTiling, _LightRayDefinition, _LightRayShadowMultiplier,
        _ScreenWaterFadeSpeed, _ScreenWaterTiling;

const static uint slices = 8;
const static float sliceStep = 1.0 / (float) slices;
const static float causticSourceSpectrumSlice = 9.0;

void CalculateScreenWater(float2 positionCS, uint3 ID, bool underwaterMask, inout uint cachedTime, out float screenWater)
{
    uint currFrameTime = ((uint) (_Time.x * _ScreenWaterFadeSpeed)) % CACHED_TIME_MAX; // looped value 0 - 62
    uint nextFrameTime = ((uint) (_Time.x * _ScreenWaterFadeSpeed + unity_DeltaTime.x * _ScreenWaterFadeSpeed)) % CACHED_TIME_MAX;
    
    if (underwaterMask)
    {
        cachedTime = currFrameTime;
        screenWater = 1.0;
        return;
    }
    
    if (cachedTime == CACHED_TIME_MAX)
    {
        screenWater = 0.0;
        return;
    }
    
    int currFrameTimeRemap = int(currFrameTime) - int(cachedTime);
    currFrameTimeRemap = currFrameTimeRemap < 0 ? CACHED_TIME_MAX + currFrameTimeRemap : currFrameTimeRemap;
    
    int nextFrameTimeRemap = int(nextFrameTime) - int(cachedTime);
    nextFrameTimeRemap = nextFrameTimeRemap < 0 ? CACHED_TIME_MAX + nextFrameTimeRemap : nextFrameTimeRemap;
    
    if (nextFrameTimeRemap < currFrameTimeRemap)
    {
        cachedTime = CACHED_TIME_MAX;
        screenWater = 0.0;
        return;
    }
    
    float currFrameTime01 = (float) currFrameTimeRemap / (CACHED_TIME_MAX - 1.0);
    
    float aspect = _ScreenSize.x / _ScreenSize.y;
    float2x2 m = GetRotationMatrixWithAspectRatio(_CameraZRotation, aspect);
    float2 uvScreen = positionCS;
    uvScreen = mul(m, uvScreen);
    uvScreen *= _ScreenWaterTiling;
    uvScreen.x *= aspect;
    
    float flowMask = _ScreenWaterNoiseTexture.SampleLevel(sampler_Linear_Repeat, uvScreen, 0.0).x;
    flowMask *= flowMask;
    
    screenWater = saturate(flowMask - currFrameTime01);
    
    return;
}

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void LightRays(uint3 threadID : SV_DispatchThreadID)
{
    uint3 ID = threadID;
    
    if (ID.x >= (uint) _ScreenSize.x || ID.y >= (uint) _ScreenSize.y)
    {
        return;
    }
    
    uint oceanScreenTextureSample = _OceanScreenTexture[ID.xy];
    uint cachedTime = ExtractCachedTime(oceanScreenTextureSample);
    bool underwaterMask = GetUnderwaterMask(oceanScreenTextureSample);
    float waterDepth = _WaterDepthTexture[ID.xy].x;
    float sceneDepth = _CameraDepthTexture[uint3(ID.xy, 0)].x;
    float viewDepth = RawToViewDepth(sceneDepth, _ZBufferParams);
    float waterViewDepth = RawToViewDepth(waterDepth, _ZBufferParams);
    
    float causticSampleOffsetDelta = 2.0 / (float) _SpectrumTextureResolution;
    
    DirectionalLightData L = _DirectionalLightDatas[0];
    float3x3 lightRotationMatrix =
    {
        L.right,
        L.up,
        L.forward
    };
    
    //float heightDelta = GetLightRayHeightFade(_WorldSpaceCameraPos_Internal.xyz, _WaterHeight, _CausticFadeDepth);
    
    float startDepth = underwaterMask ? max(_MinSliceDepth, _ProjectionParams.y) : waterViewDepth;
    
    CoordinateData cd;
    cd.viewDepth = startDepth;
    cd.rawDepth = ViewToRawDepth(cd.viewDepth, _ZBufferParams);
    cd.positionNDC = (float2) ID.xy / _ScreenSize.xy;
    cd.positionCS = float4(cd.positionNDC * 2.0 - 1.0, cd.rawDepth, 1.0);
#ifdef UNITY_UV_STARTS_AT_TOP
    cd.positionCS.y = -cd.positionCS.y;
#endif
    cd.positionRWS = mul(_InvViewProjMatrix, cd.positionCS);
    cd.positionRWS /= cd.positionRWS.w;
    
    float startDistance = length(cd.positionRWS.xyz);
    
    // for some reason _CascadeShadowCount is one less than count shown in inspector, so equal to number of cascade splits
    uint shadowIndex;
    [loop]
    for (shadowIndex = 0; shadowIndex <= _CascadeShadowCount; shadowIndex++)
    {
        if (startDistance < _CascadeShadowSplits[shadowIndex])
        {
            break;
        }
    }
    
    float sum = 0.0;
    for (uint i = 0; i < slices; i++)
    {
        float slice = (float) i;
        float normalizedSlice = slice / (float) slices;
        
        cd.viewDepth = Random(cd.positionNDC + slice);
        cd.viewDepth *= sliceStep;
        cd.viewDepth += normalizedSlice;
        cd.viewDepth *= cd.viewDepth;
        cd.viewDepth *= _MaxSliceDepth;
        
        cd.rawDepth = ViewToRawDepth(cd.viewDepth, _ZBufferParams);
        cd.rawDepth = saturate(cd.rawDepth);
        
        cd.positionCS.z = cd.rawDepth;
        cd.positionRWS = mul(_InvViewProjMatrix, cd.positionCS);
        cd.positionRWS /= cd.positionRWS.w;
        cd.positionWS = cd.positionRWS.xyz + _WorldSpaceCameraPos_Internal.xyz;
        cd.positionWSRot = mul(lightRotationMatrix, cd.positionWS).xyz;
        
        float2 causticUV = cd.positionWSRot.xy * _LightRayTiling / _PatchSize[0];
        
        float3 c  = _SpectrumTexture.SampleLevel(sampler_Linear_Repeat, float3(causticUV, causticSourceSpectrumSlice), 0.0).xyz;
        float3 cR = _SpectrumTexture.SampleLevel(sampler_Linear_Repeat, float3(causticUV.x + causticSampleOffsetDelta, causticUV.y, causticSourceSpectrumSlice), 0.0).xyz;
        float3 cU = _SpectrumTexture.SampleLevel(sampler_Linear_Repeat, float3(causticUV.x, causticUV.y + causticSampleOffsetDelta, causticSourceSpectrumSlice), 0.0).xyz;
    
        float caustic = abs(c.x - cR.x) + abs(c.y - cR.y) + abs(c.x - cU.x) + abs(c.y - cU.y);
        caustic = 1.0 / (caustic + 1.0);
        
        bool waterDepthTest = cd.viewDepth < waterViewDepth; // in front of water surface
        waterDepthTest = underwaterMask ? waterDepthTest : !waterDepthTest; // flip if out of water
        bool depthTest = waterDepthTest && (cd.viewDepth < viewDepth); // true if in water and not occluded by objects
        
        // instead of doing a hard boolean depth test, use delta to lerp to 0 and avoid speckled effect near geometry ?
        //float waterDepthTest = waterViewDepth - cd.viewDepth;
        //waterDepthTest = underwaterMask ? waterDepthTest : -waterDepthTest;
        //waterDepthTest = saturate(waterDepthTest);
        //float depthTest = min(saturate(viewDepth - cd.viewDepth), waterDepthTest);
        
        float heightDelta = GetLightRayHeightFade(cd.positionWS, _WaterHeight, _CausticFadeDepth);
        float fadeIn = GetLightRayFadeIn(startDepth, cd.viewDepth, _LightRayFadeInDistance);
        //float distanceFade = GetUnderwaterDistanceFade(underwaterMask ? cd.viewDepth : cd.viewDepth - waterViewDepth, _MaxSliceDepth * 2.0);
        
        float distance = length(cd.positionRWS.xyz);
        shadowIndex = (distance > _CascadeShadowSplits[shadowIndex]) && (shadowIndex < _CascadeShadowCount) ? shadowIndex + 1 : shadowIndex;
        float3 shadowSamplingCoords = GetDirectionalShadowSamplingCoords(_HDShadowDatas[shadowIndex], _CascadeShadowAtlasSize, cd.positionRWS.xyz);
        float shadowSample = _ShadowmapCascadeAtlas.SampleLevel(sampler_Point_Clamp, shadowSamplingCoords.xy, 0.0).x;
        float shadowTest = (distance > _CascadeShadowSplits[shadowIndex]) || shadowSamplingCoords.z > shadowSample ? 1.0 : 0.0;
        //shadowTest = lerp(1.0, shadowTest, min(depthTest, fadeIn));
        
        caustic = lerp(_LightRayShadowMultiplier, caustic, shadowTest);
        caustic = lerp(1.0, caustic, min(min(fadeIn, heightDelta), depthTest));
        //caustic = lerp(caustic, distantLightRayValue, saturate(cd.viewDepth / _ProjectionParams.z));
        
        sum += caustic;
    }
    
    sum /= (float) slices;
    sum = lerp(_LightRayStrengthInverse, sum, saturate(dot(L.forward, float3(0.0, -1.0, 0.0))));
    sum = pow(saturate(sum), _LightRayDefinition);
    
    float screenWater;
    CalculateScreenWater(cd.positionCS.xy, ID, underwaterMask, cachedTime, screenWater);
    
    EncodeCachedTime(cachedTime, oceanScreenTextureSample);
    
    _OceanScreenTexture[ID.xy] = oceanScreenTextureSample;
    _TemporaryBlurTexture[ID.xy] = float2(sum, screenWater);
}